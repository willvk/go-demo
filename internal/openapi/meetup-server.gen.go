// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// deletes a meetup
	// (DELETE /meetup)
	DeleteMeetup(ctx echo.Context) error
	// Creates a meetup
	// (PUT /meetup)
	CreateMeetup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteMeetup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMeetup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMeetup(ctx)
	return err
}

// CreateMeetup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMeetup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMeetup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/meetup", wrapper.DeleteMeetup)
	router.PUT(baseURL+"/meetup", wrapper.CreateMeetup)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXbW/bNhD+K8ItQIFCku2k+TB9mlOnQLAW8eJk7RAbwUU6W1wlUiUpx16g/z4cKb/F",
	"TlsM7YZh+ySLPN7Lc89ztB4hVWWlJElrIHkEk+ZUovt5rrXS/KPSqiJtBbnl1yojfmZkUi0qK5SExBsH",
	"Ke+FMFW6RAsJCGlPjiEEu6zIv9KMNDQhvCNjcPaso7LdXh81Vgs5g6YJQdOnWmjKILn1yWy8TZrQO7gi",
	"UylpaD/9dVVHmqaQwA+dDQCdtvqON3oazK9OXPZk62rfed9akhnRW2EsvwtLpdmvsTakJZZkAjUNsD1j",
	"IIQSFxf+yGk3hFLI9q33FIcQaik+1dTuW11Ts7ZBrXHJIF/qGUphSD+fAmegVmYxhFBxPppNbrvRjxhN",
	"Jy/3uxDCsEApKRugpWtRHuijhyhggwBlFjirLWpkaCmyfnHP+xWVQn7ZuTcj/ZeiPGnuBqtwt437tW4Y",
	"8DzNNgz5HM9aq7W/i8F+rTeu0cHFgFtlcwpSTWgpC0p/OARaYFkVrvP3ae/45Iu1roOtmTxhE0NprYVd",
	"jjg7X8YZGpH2a5uvZwO7vefVTZTc2goa9iDkVLFlqqTF1EmAShQFJPAgiiKef/wpV5ZX4lSVEAJTEBJ4",
	"L4pCYBn8ijL4meqCJGOyi0NfBv3hRYBFoR6EnAXMYBNY1eLh2m81ph9bYFphoUxd84V1CPl6DbuCEOak",
	"jffei7txl4OqiiRWAhI4cUtOEbkDo1Oum5pRQfYAMf26CbBNYizBudTIBhcZJDBwJu9WzdMthVyE4253",
	"BR9JBx9WVSFSd7rzu+EYqxn9ddxaM9T1ZzfZUZ2mZMy0LoKVWjk3oWSwORbCq27vmyW1O5wP5HQjsba5",
	"0sJQFnP0028IyRej+8vHoyBnLSqx5+IU68L+nUDQoqKUhU5sG8O2RCG53RHn7aSZhGDqskS9PMBDVgDO",
	"DIu/XZiEsIiwxD+UjLASM7T0gMvIXdGerVwCS/sd2Vwxc4eXo2unB2NsrlU9y88ox7ng+xQkzd3sXN1B",
	"D+au0mqx5KtKC/b1RibJqL53F5RMjh7770dJMkRtBUdrkk0Wq80rmrmdAsv7DBMWYue42zuNuifRSa8z",
	"rWXKR03n6LE/vHjrrOK+5hNiTh0h58o3x3iEq9ruS/a1Gx+flaw32ZLsp5qMPVPZ8hurldNs9mZC7x+d",
	"Ca74//xM8Cj8q2fCU6L/PxO82g6VvHruKPGsP7i7Ov/l5nx0fXd2OfiN11YGQ9RYkiXtLNvjq804J8xI",
	"x32nrei1klarIurzX5noUouZ4O6+ePkCtsR/TWVVcMMOkwoex+7rZwxJMIZX3e4YwmC8+hLyq0eOlgsb",
	"e7bMsRCZ8+GYNnJ/DsfQOBYNzt/0b95e37368OF71LUV4fQ7RXimle20jtrqHTGxKOArrT38RcGPdpGu",
	"ti8A/vYKn25tF+U+zprmzwAAAP//rwhjRWoPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
