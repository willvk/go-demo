// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// deletes a meetup
	// (DELETE /meetup)
	DeleteMeetup(ctx echo.Context) error
	// Creates a meetup
	// (PUT /meetup)
	CreateMeetup(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteMeetup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMeetup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMeetup(ctx)
	return err
}

// CreateMeetup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMeetup(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMeetup(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/meetup", wrapper.DeleteMeetup)
	router.PUT(baseURL+"/meetup", wrapper.CreateMeetup)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32/bNhD+V4RbgAKFJNtJ8zA9zalTwFiLeHGydoiN4CKdLa4SqZKUYy/Q/z4cKdtx",
	"7LTF0G4Ytidbx+P9+O77SOkBUlVWSpK0BpIHMGlOJbq/51orzX8qrSrSVpAzv1YZ8W9GJtWiskJJSLxz",
	"kPJaCDOlS7SQgJD25BhCsKuK/CPNSUMTwjsyBufPBirb5c1WY7WQc2iaEDR9qoWmDJIbX8w22rQJfYBL",
	"MpWShvbL33R1pGkGCfzQ2QLQabvveKenybx16qonW1f7wfvWksyI3gpj+VlYKs1+j7UhLbEkE6hZgO0e",
	"AyGUuBz6LafdEEoh26feUxxCqKX4VFO7bnVNzcYHtcYVg3yh5yiFIf18CVyBWrvFEELF9Wh2uelGP2I0",
	"m77cn0IIowKlpGyAlq5EeWCOHqKAHQKUWeC8HlEjQ0uR9ca96JdUCvnl4N6N9F/K8mS4W6zC3THu97pl",
	"wPM02zLkczxrvTbxhoP9Xq/doIPhgEdlcwpSTWgpC0q/OQRaYlkVbvJ3ae/45Iu9bpJtmDxlF0NprYVd",
	"jbk638YZGpH2a5tvzgYOe8fWbZbc2goajiDkTLFnqqTF1EmAShQFJHAviiJefPwpV5YtcapKCIEpCAm8",
	"F0UhsAx+RRn8THVBkjHZxaEvg/5oGGBRqHsh5wEz2ARWtXi48VuN6ccWmFZYKFM3fGEdQr5fw6EghAVp",
	"46P34m7c5aSqIomVgAROnMkpIndgdMrNUDMqyB4gprebANsiJhJcSI3sMMwggYFzebcenm4p5DIcd7tr",
	"+Eg6+LCqCpG63Z3fDedYn9Ffx60NQ918dosd12lKxszqIlirlWsTSgbbbSG86va+WVG7h/OBmq4l1jZX",
	"WhjKYs5++g0h+WJ2f/l4FOS8RSX2XJxhXdi/EwhaVpSy0Il9Y3gsUUhudsR5M22mIZi6LFGvDvCQFYBz",
	"w+JvDdMQlhGW+IeSEVZijpbucRW5K9qzlVtgab8jmytm7uhifOX0YIzNtarn+RnluBB8n4KkhTs713fQ",
	"vbmttFqu+KrSgmO9kUkyru/cBSWTo4f++3GSjFBbwdmaZFvFevGS5m6lwPIuw4SF2Dnu9k6j7kl00uvM",
	"apnyVtM5euiPhm+dV9zXvEMsqCPkQvnhGI9wVdt9yb52x8dnJetdnpNs7x+VrKvtPy9Zj8K/WrJPefi/",
	"ZBuH8aGW1787SjzrD24vz3+5Ph9f3Z5dDH5j29phhBpLsqSdZ7t9vRjnhBnpuO+0Fb1W0mpVRH1+04gu",
	"tJgLnu6Lly+g2Yr/isqq4IEdJhU8TNzHyQSSYAKvut0JhMFk/aHirUeOlksbe7YssBCZi+GYNnbvbhNo",
	"HIsG52/612+vbl99+PA9+nqU4fQ7ZXhmlPxeSsZGbfeOmFgU8JXeHv6i4J/WSJfe6UxlK/9pFD5detyU",
	"+3Zqmj8DAAD//zQVsBwJDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
